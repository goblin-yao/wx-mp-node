"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const koa_1 = __importDefault(require("koa"));
const koa_body_1 = __importDefault(require("koa-body"));
const koa_views_1 = __importDefault(require("koa-views"));
const koa_static_1 = __importDefault(require("koa-static"));
const koa_logger_1 = __importDefault(require("koa-logger"));
const route_1 = __importDefault(require("./route"));
const path_1 = __importDefault(require("path"));
const app = new koa_1.default();
app.use((0, koa_body_1.default)());
app.use((0, koa_views_1.default)(path_1.default.join(__dirname, "./views"), {
    extension: "ejs",
}));
app.use((0, koa_logger_1.default)());
app.use((0, koa_static_1.default)(path_1.default.join(__dirname, "./public"), {
    maxAge: 30 * 24 * 60 * 60 * 1000,
}));
app.use(route_1.default.routes()).use(route_1.default.allowedMethods());
const port = process.env.PORT || 80;
app.listen(port);
console.log(`app started at port ${port}...`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLElBQUksZUFBZSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLEdBQUc7SUFDakUsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDOUQsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzlDLE1BQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN4RCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDMUQsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQzVELE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUM1RCxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDcEQsTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLEVBQUU7SUFDeEUsU0FBUyxFQUFFLEtBQUs7Q0FDbkIsQ0FBQyxDQUFDLENBQUM7QUFDSixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxFQUFFO0lBQzFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSTtDQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNKLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7QUFDeEUsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ3BDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsSUFBSSxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qga29hXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImtvYVwiKSk7XG5jb25zdCBrb2FfYm9keV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJrb2EtYm9keVwiKSk7XG5jb25zdCBrb2Ffdmlld3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwia29hLXZpZXdzXCIpKTtcbmNvbnN0IGtvYV9zdGF0aWNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwia29hLXN0YXRpY1wiKSk7XG5jb25zdCBrb2FfbG9nZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImtvYS1sb2dnZXJcIikpO1xuY29uc3Qgcm91dGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yb3V0ZVwiKSk7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuY29uc3QgYXBwID0gbmV3IGtvYV8xLmRlZmF1bHQoKTtcbmFwcC51c2UoKDAsIGtvYV9ib2R5XzEuZGVmYXVsdCkoKSk7XG5hcHAudXNlKCgwLCBrb2Ffdmlld3NfMS5kZWZhdWx0KShwYXRoXzEuZGVmYXVsdC5qb2luKF9fZGlybmFtZSwgXCIuL3ZpZXdzXCIpLCB7XG4gICAgZXh0ZW5zaW9uOiBcImVqc1wiLFxufSkpO1xuYXBwLnVzZSgoMCwga29hX2xvZ2dlcl8xLmRlZmF1bHQpKCkpO1xuYXBwLnVzZSgoMCwga29hX3N0YXRpY18xLmRlZmF1bHQpKHBhdGhfMS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLCBcIi4vcHVibGljXCIpLCB7XG4gICAgbWF4QWdlOiAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDAsXG59KSk7XG5hcHAudXNlKHJvdXRlXzEuZGVmYXVsdC5yb3V0ZXMoKSkudXNlKHJvdXRlXzEuZGVmYXVsdC5hbGxvd2VkTWV0aG9kcygpKTtcbmNvbnN0IHBvcnQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDgwO1xuYXBwLmxpc3Rlbihwb3J0KTtcbmNvbnNvbGUubG9nKGBhcHAgc3RhcnRlZCBhdCBwb3J0ICR7cG9ydH0uLi5gKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlYQndMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZZWEJ3TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFc09FTkJRWE5DTzBGQlEzUkNMSGRFUVVFclFqdEJRVU12UWl3d1JFRkJhVU03UVVGRGFrTXNORVJCUVcxRE8wRkJRMjVETERSRVFVRnRRenRCUVVOdVF5eHZSRUZCTmtJN1FVRkROMElzWjBSQlFYZENPMEZCUlhoQ0xFMUJRVTBzUjBGQlJ5eEhRVUZITEVsQlFVa3NZVUZCUnl4RlFVRkZMRU5CUVVNN1FVRkhkRUlzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkJMR3RDUVVGUExFZEJRVVVzUTBGQlF5eERRVUZETzBGQlIyNUNMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRMHdzU1VGQlFTeHRRa0ZCVVN4RlFVRkRMR05CUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RlFVRkZPMGxCUTNoRExGTkJRVk1zUlVGQlJTeExRVUZMTzBOQlEycENMRU5CUVVNc1EwRkRTQ3hEUVVGRE8wRkJSMFlzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkJMRzlDUVVGVExFZEJRVVVzUTBGQlF5eERRVUZETzBGQlIzSkNMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRMHdzU1VGQlFTeHZRa0ZCVXl4RlFVRkRMR05CUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RlFVRkZPMGxCUXpGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzU1VGQlNUdERRVU5xUXl4RFFVRkRMRU5CUTBnc1EwRkJRenRCUVVkR0xFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEdWQlFVMHNRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRM1JFTEUxQlFVMHNTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTndReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTJwQ0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNkVUpCUVhWQ0xFbEJRVWtzUzBGQlN5eERRVUZETEVOQlFVTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdTMjloSUdaeWIyMGdYQ0pyYjJGY0lqdGNibWx0Y0c5eWRDQnJiMkZDYjJSNUlHWnliMjBnWENKcmIyRXRZbTlrZVZ3aU8xeHVhVzF3YjNKMElHdHZZVlpwWlhkeklHWnliMjBnWENKcmIyRXRkbWxsZDNOY0lqdGNibWx0Y0c5eWRDQnJiMkZUZEdGMGFXTWdabkp2YlNCY0ltdHZZUzF6ZEdGMGFXTmNJanRjYm1sdGNHOXlkQ0JyYjJGTWIyZG5aWElnWm5KdmJTQmNJbXR2WVMxc2IyZG5aWEpjSWp0Y2JtbHRjRzl5ZENCeWIzVjBaWElnWm5KdmJTQmNJaTR2Y205MWRHVmNJanRjYm1sdGNHOXlkQ0J3WVhSb0lHWnliMjBnWENKd1lYUm9YQ0k3WEc1Y2JtTnZibk4wSUdGd2NDQTlJRzVsZHlCTGIyRW9LVHRjYmx4dUx5OGc2S2VqNXA2UUlISmxjWFZsYzNRZ1ltOWtlVHBjYm1Gd2NDNTFjMlVvYTI5aFFtOWtlU2dwS1R0Y2JseHVMeThnNVlxZzZMMjk1cWloNXAyLzVieVY1cE9PWEc1aGNIQXVkWE5sS0Z4dUlDQnJiMkZXYVdWM2N5aHdZWFJvTG1wdmFXNG9YMTlrYVhKdVlXMWxMQ0JjSWk0dmRtbGxkM05jSWlrc0lIdGNiaUFnSUNCbGVIUmxibk5wYjI0NklGd2laV3B6WENJc1hHNGdJSDBwWEc0cE8xeHVYRzR2THlEbWw2WGx2NWRjYm1Gd2NDNTFjMlVvYTI5aFRHOW5aMlZ5S0NrcE8xeHVYRzR2THlEcG5abm1nSUhvdFlUbXVwRG1uSTNsaXFGY2JtRndjQzUxYzJVb1hHNGdJR3R2WVZOMFlYUnBZeWh3WVhSb0xtcHZhVzRvWDE5a2FYSnVZVzFsTENCY0lpNHZjSFZpYkdsalhDSXBMQ0I3WEc0Z0lDQWdiV0Y0UVdkbE9pQXpNQ0FxSURJMElDb2dOakFnS2lBMk1DQXFJREV3TURBc0lDOHZJT1M0Z09TNHF1YWNpRnh1SUNCOUtWeHVLVHRjYmx4dUx5OGc2TGV2NTVTeFhHNWhjSEF1ZFhObEtISnZkWFJsY2k1eWIzVjBaWE1vS1NrdWRYTmxLSEp2ZFhSbGNpNWhiR3h2ZDJWa1RXVjBhRzlrY3lncEtUdGNibU52Ym5OMElIQnZjblFnUFNCd2NtOWpaWE56TG1WdWRpNVFUMUpVSUh4OElEZ3dPMXh1WVhCd0xteHBjM1JsYmlod2IzSjBLVHRjYm1OdmJuTnZiR1V1Ykc5bktHQmhjSEFnYzNSaGNuUmxaQ0JoZENCd2IzSjBJQ1I3Y0c5eWRIMHVMaTVnS1R0Y2JpSmRmUT09Il19