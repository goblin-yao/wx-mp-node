"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chatgptlib_1 = require("../../chatgptlib");
const api = new chatgptlib_1.ChatGPTAPI({
    apiKey: `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`,
});
exports.default = {
    async chat(ctx) {
        const question = ctx.request.body.question || "";
        let res = {};
        try {
            res = await api.sendMessage(question);
        }
        catch (error) {
            res.error = error;
        }
        console.log(res);
        ctx.body = res;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbmFpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29udHJvbGxlci9hcGkvb3BlbmFpLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2pELE1BQU0sR0FBRyxHQUFHLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQztJQUNwQyxNQUFNLEVBQUUscURBQXFEO0NBQ2hFLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUc7SUFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUc7UUFDVixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQ2pELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUk7WUFDQSxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsT0FBTyxLQUFLLEVBQUU7WUFDVixHQUFHLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNyQjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDbkIsQ0FBQztDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNoYXRncHRsaWJfMSA9IHJlcXVpcmUoXCIuLi8uLi9jaGF0Z3B0bGliXCIpO1xuY29uc3QgYXBpID0gbmV3IGNoYXRncHRsaWJfMS5DaGF0R1BUQVBJKHtcbiAgICBhcGlLZXk6IGBzay1lREFaRmNMNk0wR0F1QUNObjZZb1QzQmxia0ZKV3preWxMRzlUSXpSWEQ3V3YzdzJgLFxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgYXN5bmMgY2hhdChjdHgpIHtcbiAgICAgICAgY29uc3QgcXVlc3Rpb24gPSBjdHgucmVxdWVzdC5ib2R5LnF1ZXN0aW9uIHx8IFwiXCI7XG4gICAgICAgIGxldCByZXMgPSB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlcyA9IGF3YWl0IGFwaS5zZW5kTWVzc2FnZShxdWVzdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICBjdHguYm9keSA9IHJlcztcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWIzQmxibUZwTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZZMjl1ZEhKdmJHeGxjaTloY0drdmIzQmxibUZwTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRMEVzYVVSQlFUaERPMEZCUnpsRExFMUJRVTBzUjBGQlJ5eEhRVUZITEVsQlFVa3NkVUpCUVZVc1EwRkJRenRKUVVONlFpeE5RVUZOTEVWQlFVVXNjVVJCUVhGRU8wTkJSVGxFTEVOQlFVTXNRMEZCUXp0QlFVVklMR3RDUVVGbE8wbEJRMklzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRlpPMUZCUTNKQ0xFMUJRVTBzVVVGQlVTeEhRVUZITEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZIYWtRc1NVRkJTU3hIUVVGSExFZEJRVkVzUlVGQlJTeERRVUZETzFGQlEyeENMRWxCUVVrN1dVRkRSaXhIUVVGSExFZEJRVWNzVFVGQlRTeEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xTkJRM1pETzFGQlFVTXNUMEZCVHl4TFFVRkxMRVZCUVVVN1dVRkRaQ3hIUVVGSExFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXp0VFFVTnVRanRSUVVORUxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRmxha0lzUjBGQlJ5eERRVUZETEVsQlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVNN1NVRlJha0lzUTBGQlF6dERRVU5HTEVOQlFVTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdleUJEYjI1MFpYaDBJSDBnWm5KdmJTQmNJbXR2WVZ3aU8xeHVhVzF3YjNKMElIc2dRMmhoZEVkUVZFRlFTU0I5SUdaeWIyMGdYQ0l1TGk4dUxpOWphR0YwWjNCMGJHbGlYQ0k3WEc1Y2JpOHZJR052Ym5OMElHRndhU0E5SUc1bGR5QkRhR0YwUjFCVVFWQkpLSHNnWVhCcFMyVjVPaUJ3Y205alpYTnpMbVZ1ZGk1UFVFVk9RVWxmUVZCSlgwdEZXU0I5S1R0Y2JtTnZibk4wSUdGd2FTQTlJRzVsZHlCRGFHRjBSMUJVUVZCSktIdGNiaUFnWVhCcFMyVjVPaUJnYzJzdFpVUkJXa1pqVERaTk1FZEJkVUZEVG00MldXOVVNMEpzWW10R1NsZDZhM2xzVEVjNVZFbDZVbGhFTjFkMk0zY3lZQ3dnTHk4Z2FtOXVZWE5jYmlBZ0x5OGdZWEJwUzJWNU9tQnpheTFqTlhSbVpEUXdPV1I2ZWtaclJrSlJXamhvWlZRelFteGlhMFpLVDJSVE1ISldOVlpxVjFSV2JqQkJia1I0YkhKZ0xDQXZMMkZzWlhoY2JuMHBPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0I3WEc0Z0lHRnplVzVqSUdOb1lYUW9ZM1I0T2lCRGIyNTBaWGgwS1RvZ1VISnZiV2x6WlR4MmIybGtQaUI3WEc0Z0lDQWdZMjl1YzNRZ2NYVmxjM1JwYjI0Z1BTQmpkSGd1Y21WeGRXVnpkQzVpYjJSNUxuRjFaWE4wYVc5dUlIeDhJRndpWENJN1hHNWNiaUFnSUNBdkx5QnpaVzVrSUdFZ2JXVnpjMkZuWlNCaGJtUWdkMkZwZENCbWIzSWdkR2hsSUhKbGMzQnZibk5sWEc0Z0lDQWdiR1YwSUhKbGN6b2dZVzU1SUQwZ2UzMDdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSEpsY3lBOUlHRjNZV2wwSUdGd2FTNXpaVzVrVFdWemMyRm5aU2h4ZFdWemRHbHZiaWs3WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lISmxjeTVsY25KdmNpQTlJR1Z5Y205eU8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emIyeGxMbXh2WnloeVpYTXBPMXh1WEc0Z0lDQWdMeThnYzJWdVpDQmhJR1p2Ykd4dmR5MTFjRnh1SUNBZ0lDOHZJSEpsY3lBOUlHRjNZV2wwSUdGd2FTNXpaVzVrVFdWemMyRm5aU2duUTJGdUlIbHZkU0JsZUhCaGJtUWdiMjRnZEdoaGREOG5MQ0I3WEc0Z0lDQWdMeThnSUNCamIyNTJaWEp6WVhScGIyNUpaRG9nY21WekxtTnZiblpsY25OaGRHbHZia2xrTEZ4dUlDQWdJQzh2SUNBZ2NHRnlaVzUwVFdWemMyRm5aVWxrT2lCeVpYTXVhV1FzWEc0Z0lDQWdMeThnZlNrN1hHNGdJQ0FnTHk4Z1kyOXVjMjlzWlM1c2IyY29jbVZ6TG5SbGVIUXBPMXh1WEc0Z0lDQWdMeThnYzJWdVpDQmhibTkwYUdWeUlHWnZiR3h2ZHkxMWNGeHVJQ0FnSUM4dklISmxjeUE5SUdGM1lXbDBJR0Z3YVM1elpXNWtUV1Z6YzJGblpTZ25WMmhoZENCM1pYSmxJSGRsSUhSaGJHdHBibWNnWVdKdmRYUS9KeXdnZTF4dUlDQWdJQzh2SUNBZ1kyOXVkbVZ5YzJGMGFXOXVTV1E2SUhKbGN5NWpiMjUyWlhKellYUnBiMjVKWkN4Y2JpQWdJQ0F2THlBZ0lIQmhjbVZ1ZEUxbGMzTmhaMlZKWkRvZ2NtVnpMbWxrTEZ4dUlDQWdJQzh2SUgwcE8xeHVJQ0FnSUM4dklHTnZibk52YkdVdWJHOW5LSEpsY3k1MFpYaDBLVHRjYmlBZ0lDQmpkSGd1WW05a2VTQTlJSEpsY3p0Y2JpQWdJQ0F2THlCamIyNXpkQ0J1WVcxbElEMGdZM1I0TG5KbGNYVmxjM1F1WW05a2VTNXVZVzFsSUh4OElGd2lYQ0k3WEc0Z0lDQWdMeThnWTI5dWMzUWdjR0Z6YzNkdmNtUWdQU0JqZEhndWNtVnhkV1Z6ZEM1aWIyUjVMbkJoYzNOM2IzSmtJSHg4SUZ3aVhDSTdYRzRnSUNBZ0x5OGdZMjl1YzNRZ2RYTmxjaUE5SUh0Y2JpQWdJQ0F2THlBZ0lHNWhiV1U2SUZ3aWJIVmphVzljSWl4Y2JpQWdJQ0F2THlBZ0lHbGtPaUF4TEZ4dUlDQWdJQzh2SUgwN1hHNGdJQ0FnTHk4Z1kzUjRMbUp2WkhrZ1BTQjFjMlZ5TzF4dUlDQjlMRnh1ZlR0Y2JpSmRmUT09Il19