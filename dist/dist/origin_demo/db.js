const { Sequelize, DataTypes } = require("sequelize");
const { MYSQL_USERNAME, MYSQL_PASSWORD, MYSQL_ADDRESS = "" } = process.env;
const [host, port] = MYSQL_ADDRESS.split(":");
const sequelize = new Sequelize("nodejs_demo", MYSQL_USERNAME, MYSQL_PASSWORD, {
    host,
    port,
    dialect: "mysql",
});
const Counter = sequelize.define("Counter", {
    count: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 1,
    },
});
async function init() {
    await Counter.sync({ alter: true });
}
module.exports = {
    init,
    Counter,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9vcmlnaW5fZGVtby9kYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN0RCxNQUFNLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxhQUFhLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUMzRSxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDOUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUU7SUFDM0UsSUFBSTtJQUNKLElBQUk7SUFDSixPQUFPLEVBQUUsT0FBTztDQUNuQixDQUFDLENBQUM7QUFDSCxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtJQUN4QyxLQUFLLEVBQUU7UUFDSCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87UUFDdkIsU0FBUyxFQUFFLEtBQUs7UUFDaEIsWUFBWSxFQUFFLENBQUM7S0FDbEI7Q0FDSixDQUFDLENBQUM7QUFDSCxLQUFLLFVBQVUsSUFBSTtJQUNmLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFDRCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2IsSUFBSTtJQUNKLE9BQU87Q0FDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBTZXF1ZWxpemUsIERhdGFUeXBlcyB9ID0gcmVxdWlyZShcInNlcXVlbGl6ZVwiKTtcbmNvbnN0IHsgTVlTUUxfVVNFUk5BTUUsIE1ZU1FMX1BBU1NXT1JELCBNWVNRTF9BRERSRVNTID0gXCJcIiB9ID0gcHJvY2Vzcy5lbnY7XG5jb25zdCBbaG9zdCwgcG9ydF0gPSBNWVNRTF9BRERSRVNTLnNwbGl0KFwiOlwiKTtcbmNvbnN0IHNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemUoXCJub2RlanNfZGVtb1wiLCBNWVNRTF9VU0VSTkFNRSwgTVlTUUxfUEFTU1dPUkQsIHtcbiAgICBob3N0LFxuICAgIHBvcnQsXG4gICAgZGlhbGVjdDogXCJteXNxbFwiLFxufSk7XG5jb25zdCBDb3VudGVyID0gc2VxdWVsaXplLmRlZmluZShcIkNvdW50ZXJcIiwge1xuICAgIGNvdW50OiB7XG4gICAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IDEsXG4gICAgfSxcbn0pO1xuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBhd2FpdCBDb3VudGVyLnN5bmMoeyBhbHRlcjogdHJ1ZSB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXQsXG4gICAgQ291bnRlcixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laR0l1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5dmNtbG5hVzVmWkdWdGJ5OWtZaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVWQlFVVXNVMEZCVXl4RlFVRkZMRk5CUVZNc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0QlFVZDBSQ3hOUVVGTkxFVkJRVVVzWTBGQll5eEZRVUZGTEdOQlFXTXNSVUZCUlN4aFFVRmhMRWRCUVVjc1JVRkJSU3hGUVVGRkxFZEJRVWNzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXp0QlFVVXpSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZGT1VNc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeFRRVUZUTEVOQlFVTXNZVUZCWVN4RlFVRkZMR05CUVdNc1JVRkJSU3hqUVVGakxFVkJRVVU3U1VGRE4wVXNTVUZCU1R0SlFVTktMRWxCUVVrN1NVRkRTaXhQUVVGUExFVkJRVVVzVDBGQlR6dERRVU5xUWl4RFFVRkRMRU5CUVVNN1FVRkhTQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1JVRkJSVHRKUVVNeFF5eExRVUZMTEVWQlFVVTdVVUZEVEN4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFOUJRVTg3VVVGRGRrSXNVMEZCVXl4RlFVRkZMRXRCUVVzN1VVRkRhRUlzV1VGQldTeEZRVUZGTEVOQlFVTTdTMEZEYUVJN1EwRkRSaXhEUVVGRExFTkJRVU03UVVGSFNDeExRVUZMTEZWQlFWVXNTVUZCU1R0SlFVTnFRaXhOUVVGTkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU4wUXl4RFFVRkRPMEZCUjBRc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ6dEpRVU5tTEVsQlFVazdTVUZEU2l4UFFVRlBPME5CUTFJc1EwRkJReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1OdmJuTjBJSHNnVTJWeGRXVnNhWHBsTENCRVlYUmhWSGx3WlhNZ2ZTQTlJSEpsY1hWcGNtVW9YQ0p6WlhGMVpXeHBlbVZjSWlrN1hHNWNiaTh2SU9TN2p1ZU9yK1dpZytXUG1PbUhqK1M0cmVpdnUrV1BsdWFWc09hTnJ1VzZrK21GamVlOXJseHVZMjl1YzNRZ2V5Qk5XVk5SVEY5VlUwVlNUa0ZOUlN3Z1RWbFRVVXhmVUVGVFUxZFBVa1FzSUUxWlUxRk1YMEZFUkZKRlUxTWdQU0JjSWx3aUlIMGdQU0J3Y205alpYTnpMbVZ1ZGp0Y2JseHVZMjl1YzNRZ1cyaHZjM1FzSUhCdmNuUmRJRDBnVFZsVFVVeGZRVVJFVWtWVFV5NXpjR3hwZENoY0lqcGNJaWs3WEc1Y2JtTnZibk4wSUhObGNYVmxiR2w2WlNBOUlHNWxkeUJUWlhGMVpXeHBlbVVvWENKdWIyUmxhbk5mWkdWdGIxd2lMQ0JOV1ZOUlRGOVZVMFZTVGtGTlJTd2dUVmxUVVV4ZlVFRlRVMWRQVWtRc0lIdGNiaUFnYUc5emRDeGNiaUFnY0c5eWRDeGNiaUFnWkdsaGJHVmpkRG9nWENKdGVYTnhiRndpSUM4cUlHOXVaU0J2WmlBbmJYbHpjV3duSUh3Z0oyMWhjbWxoWkdJbklId2dKM0J2YzNSbmNtVnpKeUI4SUNkdGMzTnhiQ2NnS2k4c1hHNTlLVHRjYmx4dUx5OGc1YTZhNUxtSjVwV3c1bzJ1NXFpaDVaNkxYRzVqYjI1emRDQkRiM1Z1ZEdWeUlEMGdjMlZ4ZFdWc2FYcGxMbVJsWm1sdVpTaGNJa052ZFc1MFpYSmNJaXdnZTF4dUlDQmpiM1Z1ZERvZ2UxeHVJQ0FnSUhSNWNHVTZJRVJoZEdGVWVYQmxjeTVKVGxSRlIwVlNMRnh1SUNBZ0lHRnNiRzkzVG5Wc2JEb2dabUZzYzJVc1hHNGdJQ0FnWkdWbVlYVnNkRlpoYkhWbE9pQXhMRnh1SUNCOUxGeHVmU2s3WEc1Y2JpOHZJT2FWc09hTnJ1VzZrK1dJbmVXbmkrV01sdWFXdWVhemxWeHVZWE41Ym1NZ1puVnVZM1JwYjI0Z2FXNXBkQ2dwSUh0Y2JpQWdZWGRoYVhRZ1EyOTFiblJsY2k1emVXNWpLSHNnWVd4MFpYSTZJSFJ5ZFdVZ2ZTazdYRzU5WEc1Y2JpOHZJT1d2dk9XSHV1V0luZVduaStXTWx1YVd1ZWF6bGVXU2pPYW9vZVdlaTF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJR2x1YVhRc1hHNGdJRU52ZFc1MFpYSXNYRzU5TzF4dUlsMTkiXX0=